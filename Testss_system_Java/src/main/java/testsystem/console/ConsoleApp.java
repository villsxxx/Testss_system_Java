package testsystem.console;

import testsystem.model.*;
import testsystem.repository.*;
import testsystem.service.*;

import java.util.List;
import java.util.Scanner;

public class ConsoleApp {
    private static final Scanner scanner = new Scanner(System.in);
    private static final int PAGE_SIZE = 10;

   private final AnswerRepository answerRepository = new AnswerRepository();
   private final TestRepository testRepository = new TestRepository();
   private final UserRepository userRepository = new UserRepository();
   private final QuestionRepository questionRepository = new QuestionRepository();
   private final TestAttemptRepository testAttemptRepository = new TestAttemptRepository();
   private final UserAnswerRepository userAnswerRepository = new UserAnswerRepository();

    private final TestService testService = new TestService(testRepository);
    private final UserService userService = new UserService(userRepository);
    private final QuestionService questionService = new QuestionService(questionRepository);
    private final AnswerService answerService = new AnswerService(answerRepository);
    private final TestAttemptService testAttemptService = new TestAttemptService(testAttemptRepository);
    private final UserAnswerService userAnswerService = new UserAnswerService(userAnswerRepository);

    public static void main(String[] args) {
        new ConsoleApp().run();
    }

    public void run() {
        System.out.println("=== üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (–∫–æ–Ω—Å–æ–ª—å) ===");
        while (true) {
            showMainMenu();
            String choice = scanner.nextLine().trim();
            switch (choice) {
                case "1":
                    viewTablesMenu();
                    break;
                case "2":
                    crudMenu();
                    break;
                case "3":
                    searchMenu();
                    break;
                case "4":
                    showStatistics();
                    break;
                case "5":
                    System.out.println("‚úÖ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    // --- –ú–ï–ù–Æ ---

    private void showMainMenu() {
        System.out.println("\n--- üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---");
        System.out.println("1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü");
        System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å (CRUD)");
        System.out.println("3. –ü–æ–∏—Å–∫");
        System.out.println("4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        System.out.println("5. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ");
    }

    private void viewTablesMenu() {
        while (true) {
            System.out.println("\n--- üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü ---");
            System.out.println("1. –¢–µ—Å—Ç—ã");
            System.out.println("2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");
            System.out.println("3. –í–æ–ø—Ä–æ—Å—ã");
            System.out.println("4. –û—Ç–≤–µ—Ç—ã");
            System.out.println("5. –ü–æ–ø—ã—Ç–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            System.out.println("6. –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: ");
            String choice = scanner.nextLine().trim();
            switch (choice) {
                case "1":
                    viewTests();
                    break;
                case "2":
                    viewUsers();
                    break;
                case "3":
                    viewQuestions();
                    break;
                case "4":
                    viewAnswers();
                    break;
                case "5":
                    viewAttempts();
                    break;
                case "6":
                    viewUserAnswers();
                    break;
                case "0":
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        }
    }

    // --- –ü–†–û–°–ú–û–¢–† –¢–ê–ë–õ–ò–¶ ---

    private void viewTests() {
        int total = testService.getTotalTestsCount();
        if (total == 0) {
            System.out.println("–¢–µ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }
        int totalPages = (int) Math.ceil((double) total / PAGE_SIZE);
        System.out.println("\n=== –¢–µ—Å—Ç—ã (–≤—Å–µ–≥–æ: " + total + ") ===");
        navigatePages(totalPages, (page, size) -> testService.getAllTests(page, size));
    }

    private void viewUsers() {
        int total = userService.getTotalUsersCount();
        if (total == 0) {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }
        int totalPages = (int) Math.ceil((double) total / PAGE_SIZE);
        System.out.println("\n=== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤—Å–µ–≥–æ: " + total + ") ===");
        navigatePages(totalPages, (page, size) -> userService.getAllUsers(page, size));
    }

    private void viewQuestions() {
        int total = questionService.getTotalQuestionsCount();
        if (total == 0) {
            System.out.println("–í–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }
        int totalPages = (int) Math.ceil((double) total / PAGE_SIZE);
        System.out.println("\n=== –í–æ–ø—Ä–æ—Å—ã (–≤—Å–µ–≥–æ: " + total + ") ===");
        navigatePages(totalPages, (page, size) -> questionService.getAllQuestions(page, size));
    }

    private void viewAnswers() {
        int total = answerService.getTotalAnswersCount();
        if (total == 0) {
            System.out.println("–û—Ç–≤–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }
        int totalPages = (int) Math.ceil((double) total / PAGE_SIZE);
        System.out.println("\n=== –û—Ç–≤–µ—Ç—ã (–≤—Å–µ–≥–æ: " + total + ") ===");
        navigatePages(totalPages, (page, size) -> answerService.getAllAnswers(page, size));
    }

    private void viewAttempts() {
        int total = testAttemptService.getTotalAttemptsCount();
        if (total == 0) {
            System.out.println("–ü–æ–ø—ã—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }
        int totalPages = (int) Math.ceil((double) total / PAGE_SIZE);
        System.out.println("\n=== –ü–æ–ø—ã—Ç–∫–∏ (–≤—Å–µ–≥–æ: " + total + ") ===");
        navigatePages(totalPages, (page, size) -> testAttemptService.getAllAttempts(page, size));
    }

    private void viewUserAnswers() {
        int total = userAnswerService.getTotalUserAnswersCount();
        if (total == 0) {
            System.out.println("–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }
        int totalPages = (int) Math.ceil((double) total / PAGE_SIZE);
        System.out.println("\n=== –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ: " + total + ") ===");
        navigatePages(totalPages, (page, size) -> userAnswerService.getAllUserAnswers(page, size));
    }

    private <T> void navigatePages(int totalPages, PageFetcher<T> fetcher) {
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-" + totalPages + ") –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: ");
            String input = scanner.nextLine().trim();
            try {
                int page = Integer.parseInt(input);
                if (page == 0) break;
                if (page < 1 || page > totalPages) {
                    System.out.println("‚ö†Ô∏è –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.");
                    continue;
                }
                List<T> data = fetcher.fetch(page, PAGE_SIZE);
                if (data.isEmpty()) {
                    System.out.println("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
                } else {
                    data.forEach(System.out::println);
                }
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
            }
        }
    }

    // --- CRUD –ú–ï–ù–Æ ---

    private void crudMenu() {
        System.out.println("\n--- ‚úèÔ∏è CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ ---");
        System.out.println("1. –¢–µ—Å—Ç—ã");
        System.out.println("2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");
        System.out.println("3. –í–æ–ø—Ä–æ—Å—ã");
        System.out.println("4. –û—Ç–≤–µ—Ç—ã");
        System.out.println("5. –ü–æ–ø—ã—Ç–∫–∏");
        System.out.println("6. –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å: ");
        String choice = scanner.nextLine().trim();
        switch (choice) {
            case "1":
                manageTests();
                break;
            case "2":
                manageUsers();
                break;
            case "3":
                manageQuestions();
                break;
            case "4":
                manageAnswers();
                break;
            case "5":
                manageAttempts();
                break;
            case "6":
                manageUserAnswers();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–ê–ú–ò ---

    private void manageTests() {
        System.out.println("\n--- üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å");
        System.out.println("2. –ò–∑–º–µ–Ω–∏—Ç—å");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        String op = scanner.nextLine().trim();
        switch (op) {
            case "1":
                addTest();
                break;
            case "2":
                updateTest();
                break;
            case "3":
                deleteTest();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void addTest() {
        Test test = new Test();
        System.out.print("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: ");
        test.setTitle(scanner.nextLine());
        System.out.print("–û–ø–∏—Å–∞–Ω–∏–µ: ");
        test.setDescription(scanner.nextLine());
        System.out.print("–ê–∫—Ç–∏–≤–µ–Ω? (true/false): ");
        test.setActive(Boolean.parseBoolean(scanner.nextLine()));
        try {
            testService.createTest(test);
            System.out.println("‚úÖ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void updateTest() {
        System.out.print("ID —Ç–µ—Å—Ç–∞: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        Test test = new Test();
        test.setId(id);
        System.out.print("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ");
        test.setTitle(scanner.nextLine());
        System.out.print("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ");
        test.setDescription(scanner.nextLine());
        System.out.print("–ê–∫—Ç–∏–≤–µ–Ω? (true/false): ");
        test.setActive(Boolean.parseBoolean(scanner.nextLine()));
        try {
            testService.updateTest(test);
            System.out.println("‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteTest() {
        System.out.print("ID —Ç–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/n): ");
        if ("y".equalsIgnoreCase(scanner.nextLine())) {
            testService.deleteTest(id);
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ.");
        }
    }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---

    private void manageUsers() {
        System.out.println("\n--- üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å");
        System.out.println("2. –ò–∑–º–µ–Ω–∏—Ç—å");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        String op = scanner.nextLine().trim();
        switch (op) {
            case "1":
                addUser();
                break;
            case "2":
                updateUser();
                break;
            case "3":
                deleteUser();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void addUser() {
        User user = new User();
        System.out.print("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        user.setUsername(scanner.nextLine());
        System.out.print("Email: ");
        user.setEmail(scanner.nextLine());
        try {
            userService.createUser(user);
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void updateUser() {
        System.out.print("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        User user = new User();
        user.setId(id);
        System.out.print("–ù–æ–≤–æ–µ –∏–º—è: ");
        user.setUsername(scanner.nextLine());
        System.out.print("–ù–æ–≤—ã–π email: ");
        user.setEmail(scanner.nextLine());
        try {
            userService.updateUser(user);
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteUser() {
        System.out.print("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/n): ");
        if ("y".equalsIgnoreCase(scanner.nextLine())) {
            userService.deleteUser(id);
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ.");
        }
    }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–ê–ú–ò ---

    private void manageQuestions() {
        System.out.println("\n--- ‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å");
        System.out.println("2. –ò–∑–º–µ–Ω–∏—Ç—å");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        String op = scanner.nextLine().trim();
        switch (op) {
            case "1":
                addQuestion();
                break;
            case "2":
                updateQuestion();
                break;
            case "3":
                deleteQuestion();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void addQuestion() {
        Question q = new Question();
        System.out.print("ID —Ç–µ—Å—Ç–∞: ");
        q.setTestId(parseLongOrZero(scanner.nextLine()));
        System.out.print("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: ");
        q.setText(scanner.nextLine());
        System.out.print("–¢–∏–ø (single_choice/multiple_choice/text/true_false): ");
        q.setType(scanner.nextLine());
        try {
            questionService.createQuestion(q);
            System.out.println("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void updateQuestion() {
        System.out.print("ID –≤–æ–ø—Ä–æ—Å–∞: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        Question q = new Question();
        q.setId(id);
        System.out.print("ID —Ç–µ—Å—Ç–∞: ");
        q.setTestId(parseLongOrZero(scanner.nextLine()));
        System.out.print("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: ");
        q.setText(scanner.nextLine());
        System.out.print("–ù–æ–≤—ã–π —Ç–∏–ø: ");
        q.setType(scanner.nextLine());
        try {
            questionService.updateQuestion(q);
            System.out.println("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteQuestion() {
        System.out.print("ID –≤–æ–ø—Ä–æ—Å–∞: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/n): ");
        if ("y".equalsIgnoreCase(scanner.nextLine())) {
            questionService.deleteQuestion(id);
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ.");
        }
    }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–í–ï–¢–ê–ú–ò ---

    private void manageAnswers() {
        System.out.println("\n--- ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏ ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å");
        System.out.println("2. –ò–∑–º–µ–Ω–∏—Ç—å");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        String op = scanner.nextLine().trim();
        switch (op) {
            case "1":
                addAnswer();
                break;
            case "2":
                updateAnswer();
                break;
            case "3":
                deleteAnswer();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void addAnswer() {
        Answer a = new Answer();
        System.out.print("ID –≤–æ–ø—Ä–æ—Å–∞: ");
        a.setQuestionId(parseLongOrZero(scanner.nextLine()));
        System.out.print("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: ");
        a.setText(scanner.nextLine());
        System.out.print("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π? (true/false): ");
        a.setCorrect(Boolean.parseBoolean(scanner.nextLine()));
        System.out.print("–ë–∞–ª–ª—ã: ");
        a.setPoints(Integer.parseInt(scanner.nextLine()));
        try {
            answerService.createAnswer(a);
            System.out.println("‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void updateAnswer() {
        System.out.print("ID –æ—Ç–≤–µ—Ç–∞: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        Answer a = new Answer();
        a.setId(id);
        System.out.print("ID –≤–æ–ø—Ä–æ—Å–∞: ");
        a.setQuestionId(parseLongOrZero(scanner.nextLine()));
        System.out.print("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: ");
        a.setText(scanner.nextLine());
        System.out.print("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π? (true/false): ");
        a.setCorrect(Boolean.parseBoolean(scanner.nextLine()));
        System.out.print("–ë–∞–ª–ª—ã: ");
        a.setPoints(Integer.parseInt(scanner.nextLine()));
        try {
            answerService.updateAnswer(a);
            System.out.println("‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteAnswer() {
        System.out.print("ID –æ—Ç–≤–µ—Ç–∞: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/n): ");
        if ("y".equalsIgnoreCase(scanner.nextLine())) {
            answerService.deleteAnswer(id);
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ.");
        }
    }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ü–´–¢–ö–ê–ú–ò ---

    private void manageAttempts() {
        System.out.println("\n--- üïí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∞–º–∏ ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å");
        System.out.println("2. –ò–∑–º–µ–Ω–∏—Ç—å");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        String op = scanner.nextLine().trim();
        switch (op) {
            case "1":
                addAttempt();
                break;
            case "2":
                updateAttempt();
                break;
            case "3":
                deleteAttempt();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void addAttempt() {
        TestAttempt ta = new TestAttempt();
        System.out.print("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        ta.setUserId(parseLongOrZero(scanner.nextLine()));
        System.out.print("ID —Ç–µ—Å—Ç–∞: ");
        ta.setTestId(parseLongOrZero(scanner.nextLine()));
        System.out.print("–ë–∞–ª–ª—ã: ");
        ta.setScore(Integer.parseInt(scanner.nextLine()));
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è ‚Äî –¥–∞—Ç–∞ = —Å–µ–π—á–∞—Å
        ta.setStartedAt(new java.sql.Timestamp(System.currentTimeMillis()));
        ta.setFinishedAt(new java.sql.Timestamp(System.currentTimeMillis()));
        try {
            testAttemptService.createAttempt(ta);
            System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void updateAttempt() {
        System.out.print("ID –ø–æ–ø—ã—Ç–∫–∏: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        TestAttempt ta = new TestAttempt();
        ta.setId(id);
        System.out.print("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        ta.setUserId(parseLongOrZero(scanner.nextLine()));
        System.out.print("ID —Ç–µ—Å—Ç–∞: ");
        ta.setTestId(parseLongOrZero(scanner.nextLine()));
        System.out.print("–ë–∞–ª–ª—ã: ");
        ta.setScore(Integer.parseInt(scanner.nextLine()));
        ta.setStartedAt(new java.sql.Timestamp(System.currentTimeMillis()));
        ta.setFinishedAt(new java.sql.Timestamp(System.currentTimeMillis()));
        try {
            testAttemptService.updateAttempt(ta);
            System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteAttempt() {
        System.out.print("ID –ø–æ–ø—ã—Ç–∫–∏: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/n): ");
        if ("y".equalsIgnoreCase(scanner.nextLine())) {
            testAttemptService.deleteAttempt(id);
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ.");
        }
    }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–í–ï–¢–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---

    private void manageUserAnswers() {
        System.out.println("\n--- üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å");
        System.out.println("2. –ò–∑–º–µ–Ω–∏—Ç—å");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        String op = scanner.nextLine().trim();
        switch (op) {
            case "1":
                addUserAnswer();
                break;
            case "2":
                updateUserAnswer();
                break;
            case "3":
                deleteUserAnswer();
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void addUserAnswer() {
        UserAnswer ua = new UserAnswer();
        System.out.print("ID –ø–æ–ø—ã—Ç–∫–∏: ");
        ua.setAttemptId(parseLongOrZero(scanner.nextLine()));
        System.out.print("ID –≤–æ–ø—Ä–æ—Å–∞: ");
        ua.setQuestionId(parseLongOrZero(scanner.nextLine()));
        System.out.print("ID –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ): ");
        String ansId = scanner.nextLine().trim();
        if (!ansId.isEmpty()) {
            ua.setAnswerId(Long.parseLong(ansId));
        }
        System.out.print("–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ");
        String textAns = scanner.nextLine();
        if (!textAns.trim().isEmpty()) {
            ua.setTextAnswer(textAns);
        }
        try {
            userAnswerService.createUserAnswer(ua);
            System.out.println("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void updateUserAnswer() {
        System.out.print("ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        UserAnswer ua = new UserAnswer();
        ua.setId(id);
        System.out.print("ID –ø–æ–ø—ã—Ç–∫–∏: ");
        ua.setAttemptId(parseLongOrZero(scanner.nextLine()));
        System.out.print("ID –≤–æ–ø—Ä–æ—Å–∞: ");
        ua.setQuestionId(parseLongOrZero(scanner.nextLine()));
        System.out.print("ID –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ");
        String ansId = scanner.nextLine().trim();
        if (!ansId.isEmpty()) {
            ua.setAnswerId(Long.parseLong(ansId));
        }
        System.out.print("–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ");
        String textAns = scanner.nextLine();
        if (!textAns.trim().isEmpty()) {
            ua.setTextAnswer(textAns);
        }
        try {
            userAnswerService.updateUserAnswer(ua);
            System.out.println("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω.");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void deleteUserAnswer() {
        System.out.print("ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) return;
        System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/n): ");
        if ("y".equalsIgnoreCase(scanner.nextLine())) {
            userAnswerService.deleteUserAnswer(id);
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ.");
        }
    }

    // --- –ü–û–ò–°–ö ---

    private void searchMenu() {
        System.out.println("\n--- üîç –ü–æ–∏—Å–∫ ---");
        System.out.println("1. –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ ID");
        System.out.println("2. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ: ");
        String choice = scanner.nextLine().trim();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID: ");
        long id = parseLongOrZero(scanner.nextLine());
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.");
            return;
        }

        switch (choice) {
            case "1":
                searchTestById(id);
                break;
            case "2":
                searchUserById(id);
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void searchTestById(long id) {
        List<Test> tests = testService.searchTests(id);
        if (tests.isEmpty()) {
            System.out.println("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        } else {
            tests.forEach(System.out::println);
        }
    }

    private void searchUserById(long id) {
        List<User> users = userService.searchUsers(id);
        if (users.isEmpty()) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        } else {
            users.forEach(System.out::println);
        }
    }


    // --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---

    private void showStatistics() {
        System.out.println("\n=== üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
        System.out.println("üîπ –¢–µ—Å—Ç–æ–≤: " + testService.getTotalTestsCount());
        System.out.println("üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + userService.getTotalUsersCount());
        System.out.println("üîπ –í–æ–ø—Ä–æ—Å–æ–≤: " + questionService.getTotalQuestionsCount());
        System.out.println("üîπ –û—Ç–≤–µ—Ç–æ–≤: " + answerService.getTotalAnswersCount());
        System.out.println("üîπ –ü–æ–ø—ã—Ç–æ–∫: " + testAttemptService.getTotalAttemptsCount());
        System.out.println("üîπ –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + userAnswerService.getTotalUserAnswersCount());
    }

    // --- –£–¢–ò–õ–ò–¢–´ ---

    private long parseLongOrZero(String input) {
        try {
            return Long.parseLong(input.trim());
        } catch (NumberFormatException e) {
            System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.");
            return 0;
        }
    }

    @FunctionalInterface
    interface PageFetcher<T> {
        List<T> fetch(int page, int size);
    }
}